---
title: "bayesian beta binomial to explore solutions space"
format: pdf
editor: visual
---

## 

```{r}
library(tidyverse)
```

# introduction

We have a community detection algorithm that returns a partition,
potentially a different one each time it is executed. These partitions
are classified into "solutions" labeled 𝑆1,𝑆2,...S1​,S2​,.... We aim to
determine if there exists a dominant solution, defined as a solution
that appears most frequently.

Formally, let t be the total number of trials (executions of the
algorithm). For each solution 𝑆𝑖Si​, let 𝑥𝑖xi​ denote the number of times
it appears among the 𝑛n trials.

We need to continue calculating new solutions, and update interval
estimates until a "dominant" solution emerges, i.e. until one solution
has the lower bound \> 0.5 AND all other solutions have the upper bound
\< 0.5.

## bayesian approach

To approach this problem using Bayesian inference, we can model the
probability of each solution 𝑆𝑖Si​ being the dominant solution using a
Beta distribution. This distribution allows us to incorporate prior
beliefs and update them with observed data.

Let's denote the parameters of the Beta distribution for each solution
𝑆𝑖Si​ as 𝛼𝑖αi​ and 𝛽𝑖βi​. We initialize these parameters with
non-informative priors, typically both set to 1.

After observing the data, we update the parameters using Bayesian
updating:

αi′​= αi​+xi​

βi′​= βi​+(n−xi​)

Finally, we compute the lower bound of the interval estimate for each
solution using the inverse cumulative distribution function (CDF) of the
Beta distribution with parameters 𝛼𝑖′αi′​ and 𝛽𝑖′βi′​, and check if it
exceeds 50%.

## parameters and functions

```{r}
# Confidence level
confidence_level <- 0.95
```

## data

```{r}
# the data is the number of times a solution appears
data <- data.frame(id = c("s1", "s2", "s3"), n = c(10,20,11))
s = length(data)
t = sum(data$n)
 
```

## calculation

```{r}
# non informative prior
non_informative_prior <- function(s = 1){
    return( data.frame(alpha = 1.0, beta = 1.0))
}
params <- non_informative_prior()


Bayesian_update <- function(params, i, x=1, n ){
  #update the value of i-th parameter by a number x
    params$alpha[i] <- params$alpha[i] + x
    params$beta[i]  <- params$beta[i] + n - x
    return(params)
}

plot_beta_distribution <- function(params, confidence, color = "blue") {
  x <- seq(0, 1, length.out = 1000)
  for (i in 1:nrow(params)){
    y <- dbeta(x, params$alpha[i], params$beta[i])
    main = paste("distribution parameters alpha = ", params$alpha[i], " beta = ", params$beta[i])
    plot(x, y, type = "l", col = color, lwd = 2, xlab = "x", ylab = "density", main = main )    
    
  }
  
}

params %>% plot_beta_distribution()


```

```{r}
confidence <- 0.95
qq <- (1 - confidence) / 2

data <- data.frame(n = c(1,2,1,1,10)) %>%
    mutate(id = paste0("S",1:n()))
s = nrow(data)
t = sum(data$n)

#create prior distributions
prior <- data.frame()
for (i in 1:s){
    prior <- rbind(prior,non_informative_prior())
}
prior %>% plot_beta_distribution(color = "red")

i = 3
#posterior
posterior <- prior
for (i in 1:s){
    posterior <- posterior %>% Bayesian_update(i = i, x = data$n[i], n = sum(data$n))
    print(posterior)
}
posterior %>% plot_beta_distribution(color = "blue")

    


```

```{r}
results <- data %>%    mutate(lower = NA, upper = NA)
for (i in 1:s){
  results$lower[i] <- qbeta(qq, 
      posterior$alpha[i], posterior$beta[i]) %>%
      round(2)
     results$upper[i] <- qbeta(1 - qq, 
       posterior$alpha[i], posterior$beta[i]) %>%
      round(2)
     results$mean[i] <- (results$lower[i] + results$upper[i]) / 2
}

results$y <- nrow(results):1

ggplot(results, aes(y = y)) +
    geom_rect(aes(xmin = lower, 
                  xmax = upper, 
                  ymin = y - 0.4, 
                  ymax = y + 0.4) , alpha = 0.3) +
    geom_segment(aes(x = lower, xend = upper, yend = y), size = 1) +
    geom_point(aes(x = mean ), size = 3) +
    geom_vline(xintercept = 0.5, color = "red")+
    labs(x = "Alpha", y = "Solution", title = "confidence intervals for the prevalence of each solution") +
    geom_text(aes(x = mean, label = mean), vjust = -1.0, size = 3, color = "black")  
```
